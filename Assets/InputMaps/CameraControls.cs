//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputMaps/CameraControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControls"",
    ""maps"": [
        {
            ""name"": ""RotateCamera"",
            ""id"": ""0f3f71df-3fed-4718-8e28-649bcf8618f3"",
            ""actions"": [
                {
                    ""name"": ""RotateCameraHorizontal"",
                    ""type"": ""Button"",
                    ""id"": ""b5d76f93-6642-4a1a-87b8-971475e5fa49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCameraVertical"",
                    ""type"": ""Button"",
                    ""id"": ""4e5ef50a-46ac-48bf-9638-5f2ba3c71e53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a7724b46-9f37-41a4-ac21-1b43009d98ef"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCameraHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""862eaca2-1ca3-4ef7-8cbf-1da11d8b3e01"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RotateCameraHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f3110e89-f802-4238-bcfb-c8cd2e596ce8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RotateCameraHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""616e2dbe-17d0-457f-8f3f-e7a4347dcd76"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCameraVertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9b9019b0-a1b3-4b29-b7fb-4f666a6f2218"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RotateCameraVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""107e0c97-351f-447e-be8e-75614e2d33a1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RotateCameraVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MoveSelectable"",
            ""id"": ""e88288f8-3dd7-4569-bb53-04f05813f5c7"",
            ""actions"": [
                {
                    ""name"": ""HoldSelectable"",
                    ""type"": ""Button"",
                    ""id"": ""42b47e3f-c25e-46bd-a512-f0404c12ca8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57c51370-8a01-448e-bc41-bb65e75138ca"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldSelectable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // RotateCamera
        m_RotateCamera = asset.FindActionMap("RotateCamera", throwIfNotFound: true);
        m_RotateCamera_RotateCameraHorizontal = m_RotateCamera.FindAction("RotateCameraHorizontal", throwIfNotFound: true);
        m_RotateCamera_RotateCameraVertical = m_RotateCamera.FindAction("RotateCameraVertical", throwIfNotFound: true);
        // MoveSelectable
        m_MoveSelectable = asset.FindActionMap("MoveSelectable", throwIfNotFound: true);
        m_MoveSelectable_HoldSelectable = m_MoveSelectable.FindAction("HoldSelectable", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RotateCamera
    private readonly InputActionMap m_RotateCamera;
    private List<IRotateCameraActions> m_RotateCameraActionsCallbackInterfaces = new List<IRotateCameraActions>();
    private readonly InputAction m_RotateCamera_RotateCameraHorizontal;
    private readonly InputAction m_RotateCamera_RotateCameraVertical;
    public struct RotateCameraActions
    {
        private @CameraControls m_Wrapper;
        public RotateCameraActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateCameraHorizontal => m_Wrapper.m_RotateCamera_RotateCameraHorizontal;
        public InputAction @RotateCameraVertical => m_Wrapper.m_RotateCamera_RotateCameraVertical;
        public InputActionMap Get() { return m_Wrapper.m_RotateCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateCameraActions set) { return set.Get(); }
        public void AddCallbacks(IRotateCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Add(instance);
            @RotateCameraHorizontal.started += instance.OnRotateCameraHorizontal;
            @RotateCameraHorizontal.performed += instance.OnRotateCameraHorizontal;
            @RotateCameraHorizontal.canceled += instance.OnRotateCameraHorizontal;
            @RotateCameraVertical.started += instance.OnRotateCameraVertical;
            @RotateCameraVertical.performed += instance.OnRotateCameraVertical;
            @RotateCameraVertical.canceled += instance.OnRotateCameraVertical;
        }

        private void UnregisterCallbacks(IRotateCameraActions instance)
        {
            @RotateCameraHorizontal.started -= instance.OnRotateCameraHorizontal;
            @RotateCameraHorizontal.performed -= instance.OnRotateCameraHorizontal;
            @RotateCameraHorizontal.canceled -= instance.OnRotateCameraHorizontal;
            @RotateCameraVertical.started -= instance.OnRotateCameraVertical;
            @RotateCameraVertical.performed -= instance.OnRotateCameraVertical;
            @RotateCameraVertical.canceled -= instance.OnRotateCameraVertical;
        }

        public void RemoveCallbacks(IRotateCameraActions instance)
        {
            if (m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateCameraActions @RotateCamera => new RotateCameraActions(this);

    // MoveSelectable
    private readonly InputActionMap m_MoveSelectable;
    private List<IMoveSelectableActions> m_MoveSelectableActionsCallbackInterfaces = new List<IMoveSelectableActions>();
    private readonly InputAction m_MoveSelectable_HoldSelectable;
    public struct MoveSelectableActions
    {
        private @CameraControls m_Wrapper;
        public MoveSelectableActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HoldSelectable => m_Wrapper.m_MoveSelectable_HoldSelectable;
        public InputActionMap Get() { return m_Wrapper.m_MoveSelectable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveSelectableActions set) { return set.Get(); }
        public void AddCallbacks(IMoveSelectableActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveSelectableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveSelectableActionsCallbackInterfaces.Add(instance);
            @HoldSelectable.started += instance.OnHoldSelectable;
            @HoldSelectable.performed += instance.OnHoldSelectable;
            @HoldSelectable.canceled += instance.OnHoldSelectable;
        }

        private void UnregisterCallbacks(IMoveSelectableActions instance)
        {
            @HoldSelectable.started -= instance.OnHoldSelectable;
            @HoldSelectable.performed -= instance.OnHoldSelectable;
            @HoldSelectable.canceled -= instance.OnHoldSelectable;
        }

        public void RemoveCallbacks(IMoveSelectableActions instance)
        {
            if (m_Wrapper.m_MoveSelectableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveSelectableActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveSelectableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveSelectableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveSelectableActions @MoveSelectable => new MoveSelectableActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IRotateCameraActions
    {
        void OnRotateCameraHorizontal(InputAction.CallbackContext context);
        void OnRotateCameraVertical(InputAction.CallbackContext context);
    }
    public interface IMoveSelectableActions
    {
        void OnHoldSelectable(InputAction.CallbackContext context);
    }
}
